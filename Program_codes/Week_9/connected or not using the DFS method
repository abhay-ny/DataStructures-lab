#include <stdio.h>
#include <stdlib.h>

#define MAX 100  // Maximum number of vertices in the graph

// Graph represented using an adjacency matrix
int graph[MAX][MAX];
int visited[MAX];

// Function to perform DFS traversal
void DFS(int vertex, int n) {
    visited[vertex] = 1;  // Mark the current vertex as visited
    for (int i = 0; i < n; i++) {
        if (graph[vertex][i] == 1 && !visited[i]) {
            DFS(i, n);  // Recur for all connected vertices
        }
    }
}

// Function to check if the graph is connected
int isConnected(int n) {
    // Initialize visited array to 0 (not visited)
    for (int i = 0; i < n; i++) {
        visited[i] = 0;
    }

    // Perform DFS starting from the first vertex (0)
    DFS(0, n);

    // Check if all vertices were visited
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            return 0;  // If any vertex is not visited, the graph is not connected
        }
    }
    return 1;  // All vertices were visited, the graph is connected
}

int main() {
    int n;  // Number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    if (isConnected(n)) {
        printf("The graph is connected.\n");
    } else {
        printf("The graph is not connected.\n");
    }

    return 0;
}
